@implements IDisposable
@inherits LayoutComponentBase
@inject NavigationManager NavigationManager

<div class="page">
    <Drawer DrawerHeader="drawerHeader" DrawerFooter="drawerFooter">
        <DrawerBody>
            <div class="w-100">
                <NavMenu></NavMenu>
            </div>
        </DrawerBody>
        <DrawerTarget>
            <div class="nav-buttons-container">
                <NavLink href="@UrlGenerator.GetUrl(new Uri(NavigationManager.Uri).LocalPath, !ToggledSidebar)">
                    <DxButton RenderStyle="@ButtonRenderStyle.Secondary" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button" IconCssClass="icon icon-menu"></DxButton>
                </NavLink>
                @if (new Uri(NavigationManager.Uri).LocalPath != "/") {
                    <NavLink href="@UrlGenerator.GetUrl("/", ToggledSidebar)" class="button-link hidden">
                                <DxButton RenderStyle="@ButtonRenderStyle.Dark" Text="Back to Home" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="icon icon-back"></DxButton>
                    </NavLink>
                }
                <AuthorizeView>
                    <Authorized>
                        <NavLink href="@UrlGenerator.GetUrl("Account/Manage", ToggledSidebar)" class="button-link menubutton-float-end display-desktop">
                                    <DxButton RenderStyle="@ButtonRenderStyle.Dark" Text="@context.User.Identity?.Name" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="icon icon-user"></DxButton>
                        </NavLink>
                        <form action="@UrlGenerator.GetUrl("Account/Logout", ToggledSidebar)" method="post" class="display-desktop">
                            <AntiforgeryToken />
                            <input type="hidden" name="ReturnUrl" value="@currentUrl" />
                                   <DxButton RenderStyle="@ButtonRenderStyle.Dark" SubmitFormOnClick="true" Text="Log out" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="icon icon-log-out"></DxButton>
                        </form>
                    </Authorized>
                    <NotAuthorized>
                        <NavLink href="@UrlGenerator.GetUrl("Account/Login", ToggledSidebar)" class="button-link menubutton-float-end display-desktop">
                                    <DxButton RenderStyle="@ButtonRenderStyle.Dark" Text="Log in" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="icon icon-log-in"></DxButton>
 
                        </NavLink>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
            <div class="p-4">
                @Body
            </div>
        </DrawerTarget>
    </Drawer>
</div>

@code {
    [SupplyParameterFromQuery(Name = UrlGenerator.ToggleSidebarName)]
    public bool ToggledSidebar { get; set; }

    private RenderFragment drawerHeader => @<div class="navigation-drawer-header">
        <img class="logo" src="images/logo.svg" alt="DevExpress logo" />
        <NavLink href="@UrlGenerator.GetUrl(new Uri(NavigationManager.Uri).LocalPath, !ToggledSidebar)">
            <DxButton RenderStyle="@ButtonRenderStyle.Light" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="menu-button-nav" IconCssClass="@(ToggledSidebar ? "icon icon-close" : "icon icon-menu")"></DxButton>
        </NavLink>
    </div>;

    private RenderFragment drawerFooter => @<div>
        <NavLink href="https://docs.devexpress.com/Blazor/400725/blazor-components" class="button-link">
            <DxButton Text="Docs" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="footer-button" RenderStyle="@ButtonRenderStyle.Light" IconCssClass="icon docs-icon"></DxButton>
        </NavLink>
        <NavLink href="https://demos.devexpress.com/blazor/" class="button-link">
            <DxButton Text="Demos" RenderStyleMode="@ButtonRenderStyleMode.Text" CssClass="footer-button" RenderStyle="@ButtonRenderStyle.Light" IconCssClass="icon demos-icon"></DxButton>
        </NavLink>
    </div>;

    private string? currentUrl;

    protected override void OnInitialized() {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e) {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose() {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
 
}